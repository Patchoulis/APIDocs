openapi: 3.0.3
info:
  title: uniONE API
  version: 1.0.0
  description: All about the endpoints of uniONE
x-config:
  swagger_ui:
    try_it_out_enabled: false
paths:
  /auth/login/:
    post:
      operationId: auth_login_create
      tags:
      - auth
      security:
      - {}
      responses:
        '201':
          description: No response body
  /auth/refresh/:
    post:
      operationId: auth_refresh_create
      description: |-
        Takes a refresh type JSON web token and returns an access type JSON web
        token if the refresh token is valid.
      tags:
      - auth
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyTokenRefresh'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/MyTokenRefresh'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/MyTokenRefresh'
        required: true
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/MyTokenRefresh'
          description: ''
  /bans/ban/{email_key}:
    put:
      operationId: bans_ban_update
      description: Deletes a user with the specified email. It also saves the email
        to a database to act as a ban. An ID is returned with the ban object's id
      parameters:
      - in: path
        name: email_key
        schema:
          type: string
        required: true
      tags:
      - bans
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
          description: ''
    delete:
      operationId: bans_ban_destroy
      description: Deletes a ban object with the given email associated to it.
      parameters:
      - in: path
        name: email_key
        schema:
          type: string
        required: true
      tags:
      - bans
      security:
      - {}
      responses:
        '200':
          description: No response body
  /events/event:
    get:
      operationId: events_event_retrieve
      description: Gets all events. Has the option of two query types.                    If
        a parameter for 'attendance_type' is set, it would get all events, even if
        filled if 'all' is the value.                    If 'filled' is instead used,
        only filled up events are returned, and no parameter would just result in
        unfilled                    events being shown. Finally, 'proposal_type' being
        set to 'all' would get all the events, regardless if they were                    a
        proposal or not. 'proposals' would only get proposals, and no parameter would
        result in only non-proposals                   being sent.
      parameters:
      - in: query
        name: attendance_type
        schema:
          type: string
        description: Filter by attendance (optional)
      - in: query
        name: proposal_type
        schema:
          type: string
        description: Filter by if it's a proposal (optional)
      tags:
      - events
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
    put:
      operationId: events_event_update
      description: Adds a new event, it checks admin authorization for non-proposals.                         Additionally,
        there is an optional parameter 'type' when it's equal to 'proposal', will
        add the event as a proposal instead.
      parameters:
      - in: query
        name: type
        schema:
          type: string
        description: Option to make it a proposal (optional)
      tags:
      - events
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /events/event/{id}:
    patch:
      operationId: events_event_partial_update
      description: Updates the fields of an event.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
      security:
      - {}
      responses:
        '200':
          description: No response body
        '404':
          description: No response body
        '403':
          description: No response body
    delete:
      operationId: events_event_destroy
      description: Deletes an event if it exists in the database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - events
      security:
      - {}
      responses:
        '200':
          description: No response body
        '404':
          description: No response body
        '403':
          description: No response body
  /events/event_pending:
    put:
      operationId: events_event_pending_update
      description: Adds a user to the attendance for a given event.
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          description: No response body
        '400':
          description: No response body
  /events/event_pending/{id}:
    post:
      operationId: events_event_pending_create
      description: Accepts or rejects a pending request. The ID is returned from the
        'Event_User' object made.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
          description: ''
        '404':
          description: No response body
        '403':
          description: No response body
  /flags/delete_flag/{id}:
    delete:
      operationId: flags_delete_flag_destroy
      description: Delete a flag using its id.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - flags
      security:
      - {}
      responses:
        '200':
          description: No response body
        '403':
          description: No response body
  /flags/flagged_users:
    get:
      operationId: flags_flagged_users_list
      description: Lists all the flagged users
      tags:
      - flags
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /flags/users_with_flags:
    get:
      operationId: flags_users_with_flags_list
      description: Lists all the users and has a flag field
      tags:
      - flags
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSerializerWithFlags'
          description: ''
  /locations/:
    get:
      operationId: locations_list
      description: Lists all the locations
      tags:
      - locations
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
          description: ''
    post:
      operationId: locations_create
      description: Creates a list of locations
      tags:
      - locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Location'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Location'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Location'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
          description: ''
    patch:
      operationId: locations_partial_update
      description: Updates all locations
      tags:
      - locations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedLocation'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedLocation'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedLocation'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Location'
          description: ''
    delete:
      operationId: locations_destroy
      description: Deletes all locations
      tags:
      - locations
      security:
      - {}
      responses:
        '204':
          description: No response body
  /locations/{location_id}:
    get:
      operationId: locations_retrieve
      description: Gets a location
      parameters:
      - in: path
        name: location_id
        schema:
          type: integer
        required: true
      tags:
      - locations
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
    patch:
      operationId: locations_partial_update_2
      description: |-
        GET/locations/<location_id>/
        Returns:
        - 200: If the location is found
        - 404: If the location is not found
      parameters:
      - in: path
        name: location_id
        schema:
          type: integer
        required: true
      tags:
      - locations
      security:
      - {}
      responses:
        '200':
          description: No response body
    delete:
      operationId: locations_destroy_2
      description: Deletes a location
      parameters:
      - in: path
        name: location_id
        schema:
          type: integer
        required: true
      tags:
      - locations
      security:
      - {}
      responses:
        '204':
          description: No response body
  /logins/login:
    post:
      operationId: logins_login_create
      description: Logs into the admin or business portal,                              the
        type parameter can change between them. The user's data and an access token
        is returned.
      parameters:
      - in: query
        name: type
        schema:
          type: string
        description: Option to login as an admin of business manager, defaults to
          admin (optional)
      tags:
      - logins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInp'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginInp'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginInp'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
        '401':
          description: No response body
  /matches/:
    post:
      operationId: matches_create
      description: Creates a new match
      tags:
      - matches
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Matches'
            examples:
              Example1:
                value:
                  requester: 1
                  recipient: 2
                  requesterTimeSlot: 1
                  recipientTimeSlot: 2
                  status: pending
                summary: Example 1
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Matches'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Matches'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Matches'
          description: ''
  /matches/{match_id}:
    get:
      operationId: matches_retrieve
      description: Get a match
      parameters:
      - in: path
        name: match_id
        schema:
          type: integer
        required: true
      tags:
      - matches
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Matches'
          description: ''
    patch:
      operationId: matches_partial_update
      description: Update a match
      parameters:
      - in: path
        name: match_id
        schema:
          type: integer
        required: true
      tags:
      - matches
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedMatches'
            examples:
              Example1:
                value:
                  requester: 1
                  recipient: 2
                  requesterTimeSlot: 1
                  recipientTimeSlot: 2
                  status: pending
                summary: Example 1
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedMatches'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedMatches'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Matches'
          description: ''
    delete:
      operationId: matches_destroy
      description: Delete a match
      parameters:
      - in: path
        name: match_id
        schema:
          type: integer
        required: true
      tags:
      - matches
      security:
      - {}
      responses:
        '204':
          description: No response body
  /matches/{match_id}/location:
    get:
      operationId: matches_location_retrieve
      description: Gets a location
      parameters:
      - in: path
        name: match_id
        schema:
          type: integer
        required: true
      tags:
      - matches
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Location'
          description: ''
  /matches/{match_id}/messages:
    get:
      operationId: matches_messages_list
      parameters:
      - in: path
        name: match_id
        schema:
          type: integer
        required: true
      tags:
      - messages
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Question'
          description: ''
        '400':
          description: No response body
        '404':
          description: No response body
    post:
      operationId: matches_messages_create
      parameters:
      - in: path
        name: match_id
        schema:
          type: integer
        required: true
      tags:
      - messages
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Question'
            examples:
              ExampleQuestion:
                value:
                  sender: 1
                  recipient: 2
                  content: Hello
                  match: 1
                summary: Example Question
              ExampleAnswer:
                value:
                  sender: 1
                  recipient: 2
                  content: Hello
                  question: 1
                  match: 1
                summary: Example Answer
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Question'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Question'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Question'
          description: ''
        '400':
          description: No response body
        '404':
          description: No response body
  /organizations/organization:
    get:
      operationId: organizations_organization_list
      description: Lists all the Organizations
      tags:
      - organizations
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Org'
          description: ''
    put:
      operationId: organizations_organization_update
      description: Creates a new organization
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Org'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Org'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Org'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Org'
          description: ''
  /organizations/organization/{id}:
    get:
      operationId: organizations_organization_retrieve
      description: Gets an organization with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - organizations
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Org'
          description: ''
    post:
      operationId: organizations_organization_create
      description: Updates an organization with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Org'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Org'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Org'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Org'
          description: ''
    patch:
      operationId: organizations_organization_partial_update
      description: Partially updates an organization with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrg'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrg'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrg'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Org'
          description: ''
    delete:
      operationId: organizations_organization_destroy
      description: Deletes an organization with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - organizations
      security:
      - {}
      responses:
        '204':
          description: No response body
  /users/:
    get:
      operationId: users_list
      description: Lists all the users
      tags:
      - users
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_create
      description: Creates a new user
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example1:
                value:
                  firstName: Joseph
                  lastName: Doe
                  bio: I am a student at the University of Alberta
                  email: jdoe@ualberta.ca
                summary: Example 1
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /users/{id}:
    get:
      operationId: users_retrieve
      description: Gets a user with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      description: Updates a user with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example1:
                value:
                  firstName: Joseph
                  lastName: Doe
                  bio: I am a student at the University of Alberta
                  email: jdoe@ualberta.ca
                summary: Example 1
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      description: Partially updates a user with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
            examples:
              Example1:
                value:
                  firstName: Joseph
                  lastName: Doe
                  bio: I am a student at the University of Alberta
                  email: jdoe@ualberta.ca
                summary: Example 1
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      description: Deletes a user with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - {}
      responses:
        '204':
          description: No response body
  /users/{user_id}/blocklist/:
    get:
      operationId: users_blocklist_list
      description: Lists all the blocked users of a user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - blocklist
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_blocklist_create
      description: Blocks a user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - blocklist
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example1:
                value:
                  firstName: Joseph
                  lastName: Doe
                  bio: I am a student at the University of Alberta
                  email: jdoe@ualberta.ca
                summary: Example 1
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_blocklist_destroy
      description: Unblocks a user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - blocklist
      security:
      - {}
      responses:
        '204':
          description: No response body
  /users/{user_id}/matches/:
    get:
      operationId: users_matches_list
      description: Get all matches for a user
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - matches
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Matches'
          description: ''
  /users/{user_id}/matches/{match_id}/notify/:
    post:
      operationId: users_matches_notify_create
      description: Send a push notification to the other user of the match         notifying
        them with a message about the availability of         the current user. E.g.
        'I'll be late', 'I'm here', etc.
      parameters:
      - in: path
        name: match_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - matches
      security:
      - {}
      responses:
        '200':
          description: No response body
  /users/{user_id}/matching/{timeslot_id}:
    get:
      operationId: users_matching_list
      description: Returns a list of users that match the user's tags and timeslot
      parameters:
      - in: path
        name: timeslot_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - matching
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/MatchingUser'
          description: ''
  /users/{user_id}/tags/:
    get:
      operationId: users_tags_list
      description: Lists all the users tags
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - tags
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
          description: ''
    post:
      operationId: users_tags_create
      description: Creates a new tag
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - tags
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Tag'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Tag'
          description: ''
        '400':
          description: No response body
  /users/{user_id}/tags/{tag_id}:
    delete:
      operationId: users_tags_destroy
      description: Removes user from tag
      parameters:
      - in: path
        name: tag_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - tags
      security:
      - {}
      responses:
        '204':
          description: No response body
  /users/{user_id}/timeslots/:
    get:
      operationId: users_timeslots_list
      description: Lists all the users timeslots
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timeslot'
          description: ''
    post:
      operationId: users_timeslots_create
      description: Creates a new timeslot
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Timeslot'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Timeslot'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Timeslot'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timeslot'
          description: ''
    delete:
      operationId: users_timeslots_destroy
      description: Deletes all the users timeslots
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      security:
      - {}
      responses:
        '204':
          description: No response body
  /users/{user_id}/timeslots/{date}/:
    get:
      operationId: users_timeslots_retrieve
      description: Gets all the timeslots of a specific date
      parameters:
      - in: path
        name: date
        schema:
          type: string
          pattern: ^\d{4}-\d{2}-\d{2}$
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
          description: ''
  /users/{user_id}/timeslots/{timeslot_id}:
    get:
      operationId: users_timeslots_retrieve_2
      description: Gets a timeslot
      parameters:
      - in: path
        name: timeslot_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
          description: ''
    patch:
      operationId: users_timeslots_partial_update
      description: Updates a timeslot
      parameters:
      - in: path
        name: timeslot_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTimeslot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTimeslot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTimeslot'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
          description: ''
    delete:
      operationId: users_timeslots_destroy_2
      description: Deletes a timeslot
      parameters:
      - in: path
        name: timeslot_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      security:
      - {}
      responses:
        '204':
          description: No response body
components:
  schemas:
    CategoryEnum:
      enum:
      - food
      - top
      - normal
      type: string
      description: |-
        * `food` - Food
        * `top` - Top
        * `normal` - Normal
    Event:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        summary:
          type: string
        attendance_max:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        proposal:
          type: boolean
        org_id:
          type: integer
      required:
      - attendance_max
      - id
      - org_id
      - summary
    EventRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        event_id:
          type: integer
        user_id:
          type: integer
      required:
      - event_id
      - id
      - user_id
    EventUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        was_rejected:
          type: boolean
        event_id:
          type: integer
        user_id:
          type: integer
      required:
      - event_id
      - id
      - user_id
    IdResponse:
      type: object
      properties:
        id:
          type: integer
      required:
      - id
    Location:
      type: object
      properties:
        place_id:
          type: string
      required:
      - place_id
    LoginInp:
      type: object
      properties:
        email:
          type: string
        password:
          type: integer
      required:
      - email
      - password
    Matches:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        requester:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        recipient:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        requesterTimeSlot:
          allOf:
          - $ref: '#/components/schemas/Timeslot'
          readOnly: true
        recipientTimeSlot:
          allOf:
          - $ref: '#/components/schemas/Timeslot'
          readOnly: true
        location:
          $ref: '#/components/schemas/Location'
        status:
          $ref: '#/components/schemas/StatusEnum'
        startTime:
          type: string
          format: date-time
          nullable: true
        endTime:
          type: string
          format: date-time
          nullable: true
        card:
          type: string
          nullable: true
      required:
      - id
      - location
      - recipient
      - recipientTimeSlot
      - requester
      - requesterTimeSlot
    MatchingUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        firstName:
          type: string
          readOnly: true
        lastName:
          type: string
          readOnly: true
        preferredName:
          type: string
          maxLength: 50
        bio:
          type: string
          maxLength: 500
        major:
          type: string
          maxLength: 50
        year:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        pronouns:
          type: string
          maxLength: 50
        backgroundImg:
          type: string
          nullable: true
        email:
          type: string
          readOnly: true
        timeslot:
          $ref: '#/components/schemas/Timeslot'
        otherUserTimeslot:
          $ref: '#/components/schemas/Timeslot'
      required:
      - bio
      - email
      - firstName
      - id
      - lastName
      - otherUserTimeslot
      - timeslot
    MyTokenRefresh:
      type: object
      properties:
        refresh:
          type: string
        access:
          type: string
          readOnly: true
      required:
      - access
      - refresh
    Org:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        email:
          type: string
          maxLength: 100
        manager_id:
          type: integer
      required:
      - description
      - email
      - id
      - manager_id
      - name
    PatchedEvent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        summary:
          type: string
        attendance_max:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        proposal:
          type: boolean
        org_id:
          type: integer
    PatchedLocation:
      type: object
      properties:
        place_id:
          type: string
    PatchedMatches:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        requester:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        recipient:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        requesterTimeSlot:
          allOf:
          - $ref: '#/components/schemas/Timeslot'
          readOnly: true
        recipientTimeSlot:
          allOf:
          - $ref: '#/components/schemas/Timeslot'
          readOnly: true
        location:
          $ref: '#/components/schemas/Location'
        status:
          $ref: '#/components/schemas/StatusEnum'
        startTime:
          type: string
          format: date-time
          nullable: true
        endTime:
          type: string
          format: date-time
          nullable: true
        card:
          type: string
          nullable: true
    PatchedOrg:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        email:
          type: string
          maxLength: 100
        manager_id:
          type: integer
    PatchedTimeslot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        date:
          type: string
          format: date
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        isAvailable:
          type: boolean
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        email:
          type: string
        preferredName:
          type: string
          maxLength: 50
        major:
          type: string
          maxLength: 50
        year:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        pronouns:
          type: string
          maxLength: 50
        backgroundImg:
          type: string
          nullable: true
        finishedSetup:
          type: boolean
    Question:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        sender:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        recipient:
          allOf:
          - $ref: '#/components/schemas/User'
          readOnly: true
        content:
          type: string
          maxLength: 300
        match:
          allOf:
          - $ref: '#/components/schemas/Matches'
          nullable: true
        time:
          type: string
          format: date-time
          readOnly: true
      required:
      - content
      - id
      - recipient
      - sender
      - time
    Result:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        access:
          type: string
      required:
      - access
      - user
    StatusEnum:
      enum:
      - pending
      - accepted
      - declined
      - cancelled
      type: string
      description: |-
        * `pending` - Pending
        * `accepted` - Accepted
        * `declined` - Declined
        * `cancelled` - Cancelled
    Tag:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
          maxLength: 100
        category:
          $ref: '#/components/schemas/CategoryEnum'
      required:
      - id
      - name
    Timeslot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        date:
          type: string
          format: date
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        isAvailable:
          type: boolean
      required:
      - date
      - endTime
      - id
      - startTime
      - user
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        email:
          type: string
        preferredName:
          type: string
          maxLength: 50
        major:
          type: string
          maxLength: 50
        year:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        pronouns:
          type: string
          maxLength: 50
        backgroundImg:
          type: string
          nullable: true
        finishedSetup:
          type: boolean
      required:
      - bio
      - email
      - firstName
      - id
      - lastName
    UserSerializerWithFlags:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        email:
          type: string
        is_flag:
          type: string
          readOnly: true
        last_login:
          type: string
          format: date-time
          nullable: true
        preferredName:
          type: string
          maxLength: 50
        major:
          type: string
          maxLength: 50
        year:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        pronouns:
          type: string
          maxLength: 50
        backgroundImg:
          type: string
          nullable: true
        finishedSetup:
          type: boolean
        expoPushToken:
          type: string
          nullable: true
          maxLength: 100
        is_admin:
          type: boolean
        is_active:
          type: boolean
        is_staff:
          type: boolean
        is_superuser:
          type: boolean
        privacy_policy:
          type: boolean
        creation_date:
          type: string
          format: date-time
          readOnly: true
        is_restricted:
          type: boolean
        is_manager:
          type: boolean
        password:
          type: string
          readOnly: true
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
        blockedUsers:
          type: array
          items:
            type: integer
            title: BlockedUsers
      required:
      - bio
      - creation_date
      - email
      - firstName
      - id
      - is_flag
      - lastName
      - password
