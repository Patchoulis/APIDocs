openapi: 3.0.3
info:
  title: uniONE API
  version: 1.0.0
  description: All about the endpoints of uniONE
paths:
  /ads/accept_all:
    get:
      operationId: ads_accept_all_retrieve
      description: |-
        Handles GET requests
        parameters:
            request: rest_framework.request.Request
                The request object
            args: list
                The positional arguments
            kwargs: dict
                The keyword arguments
        returns:
            response: rest_framework.response.Response
                The response object
      tags:
      - ads
      security:
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: ads_accept_all_create
      description: Accepts all Ad proposals
      tags:
      - ads
      security:
      - {}
      responses:
        '200':
          description: No response body
        '403':
          description: No response body
  /ads/ad:
    get:
      operationId: ads_ad_retrieve
      description: |-
        Handles GET requests
        parameters:
            request: rest_framework.request.Request
                The request object
            args: list
                The positional arguments
            kwargs: dict
                The keyword arguments
        returns:
            response: rest_framework.response.Response
                The response object
      tags:
      - ads
      security:
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: ads_ad_create
      description: Adds a new ad, it checks admin authorization for non-proposals.                         Additionally,
        there is an optional parameter 'type' when it's equal to 'proposal', will
        add the event as a proposal instead.
      parameters:
      - in: query
        name: type
        schema:
          type: string
        description: Option to make it a proposal (optional)
      tags:
      - ads
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Ad'
          description: ''
  /ads/ad/{id}:
    post:
      operationId: ads_ad_create_2
      description: Updates the fields of an ad.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - ads
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ad'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Ad'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Ad'
        required: true
      security:
      - {}
      responses:
        '200':
          description: No response body
        '404':
          description: No response body
        '403':
          description: No response body
    delete:
      operationId: ads_ad_destroy
      description: Deletes an ad if it exists in the database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - ads
      security:
      - {}
      responses:
        '200':
          description: No response body
        '404':
          description: No response body
        '403':
          description: No response body
  /bans/ban/{email_key}:
    put:
      operationId: bans_ban_update
      description: Deletes a user with the specified email. It also saves the email
        to a database to act as a ban. An ID is returned with the ban object's id
      parameters:
      - in: path
        name: email_key
        schema:
          type: string
        required: true
      tags:
      - bans
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
          description: ''
    delete:
      operationId: bans_ban_destroy
      description: Deletes a ban object with the given email associated to it.
      parameters:
      - in: path
        name: email_key
        schema:
          type: string
        required: true
      tags:
      - bans
      security:
      - {}
      responses:
        '200':
          description: No response body
  /events/accept_all:
    get:
      operationId: events_accept_all_retrieve
      description: |-
        Handles GET requests
        parameters:
            request: rest_framework.request.Request
                The request object
            args: list
                The positional arguments
            kwargs: dict
                The keyword arguments
        returns:
            response: rest_framework.response.Response
                The response object
      tags:
      - events
      security:
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: events_accept_all_create
      description: Accepts all Event proposals
      tags:
      - events
      security:
      - {}
      responses:
        '200':
          description: No response body
        '403':
          description: No response body
  /events/event:
    get:
      operationId: events_event_retrieve
      description: |-
        Handles GET requests
        parameters:
            request: rest_framework.request.Request
                The request object
            args: list
                The positional arguments
            kwargs: dict
                The keyword arguments
        returns:
            response: rest_framework.response.Response
                The response object
      tags:
      - events
      security:
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: events_event_update
      description: Adds a new event, it checks admin authorization for non-proposals.                         Additionally,
        there is an optional parameter 'type' when it's equal to 'proposal', will
        add the event as a proposal instead.
      parameters:
      - in: query
        name: type
        schema:
          type: string
        description: Option to make it a proposal (optional)
      tags:
      - events
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Event'
          description: ''
  /events/event/{id}:
    patch:
      operationId: events_event_partial_update
      description: Updates the fields of an event.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedEvent'
      security:
      - {}
      responses:
        '200':
          description: No response body
        '404':
          description: No response body
        '403':
          description: No response body
    delete:
      operationId: events_event_destroy
      description: Deletes an event if it exists in the database.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - events
      security:
      - {}
      responses:
        '200':
          description: No response body
        '404':
          description: No response body
        '403':
          description: No response body
  /events/event_pending:
    put:
      operationId: events_event_pending_update
      description: Adds a user to the attendance for a given event.
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventRequest'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventRequest'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventRequest'
        required: true
      security:
      - {}
      responses:
        '200':
          description: No response body
        '400':
          description: No response body
  /events/event_pending/{id}:
    post:
      operationId: events_event_pending_create
      description: Accepts or rejects a pending request. The ID is returned from the
        'Event_User' object made.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - events
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EventUser'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/EventUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/EventUser'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/IdResponse'
          description: ''
        '404':
          description: No response body
        '403':
          description: No response body
  /flags/delete_flag/{id}:
    delete:
      operationId: flags_delete_flag_destroy
      description: Delete a flag using its id.
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - flags
      security:
      - {}
      responses:
        '200':
          description: No response body
        '403':
          description: No response body
  /flags/flagged_users:
    get:
      operationId: flags_flagged_users_list
      description: Lists all the flagged users
      tags:
      - flags
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
  /flags/flags:
    get:
      operationId: flags_flags_retrieve
      description: |-
        Handles GET requests
        parameters:
            request: rest_framework.request.Request
                The request object
            args: list
                The positional arguments
            kwargs: dict
                The keyword arguments
        returns:
            response: rest_framework.response.Response
                The response object
      tags:
      - flags
      security:
      - {}
      responses:
        '200':
          description: No response body
  /flags/users_with_flags:
    get:
      operationId: flags_users_with_flags_list
      description: Lists all the users and has a flag field
      tags:
      - flags
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/UserSerializerWithFlags'
          description: ''
  /logins/login:
    post:
      operationId: logins_login_create
      description: Logs into the admin or business portal,                              the
        type parameter can change between them. The user's data and an access token
        is returned.
      parameters:
      - in: query
        name: type
        schema:
          type: string
        description: Option to login as an admin of business manager, defaults to
          admin (optional)
      tags:
      - logins
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginInp'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/LoginInp'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/LoginInp'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Result'
          description: ''
        '401':
          description: No response body
  /logins/token-auth:
    get:
      operationId: logins_token_auth_retrieve
      description: |-
        This is the login view that's used so a user isn't logged out after an hour

        ---
        parameters:
          none
        responses:
          204:
            description: Successful user token refresh
          400:
            description: Bad request
      tags:
      - logins
      security:
      - {}
      responses:
        '200':
          description: No response body
  /organizations/accept_all:
    get:
      operationId: organizations_accept_all_retrieve
      description: |-
        Handles GET requests
        parameters:
            request: rest_framework.request.Request
                The request object
            args: list
                The positional arguments
            kwargs: dict
                The keyword arguments
        returns:
            response: rest_framework.response.Response
                The response object
      tags:
      - organizations
      security:
      - {}
      responses:
        '200':
          description: No response body
    post:
      operationId: organizations_accept_all_create
      description: Accepts all Ad proposals
      tags:
      - organizations
      security:
      - {}
      responses:
        '200':
          description: No response body
        '403':
          description: No response body
  /organizations/organization:
    get:
      operationId: organizations_organization_retrieve
      description: |-
        Handles GET requests
        parameters:
            request: rest_framework.request.Request
                The request object
            args: list
                The positional arguments
            kwargs: dict
                The keyword arguments
        returns:
            response: rest_framework.response.Response
                The response object
      tags:
      - organizations
      security:
      - {}
      responses:
        '200':
          description: No response body
    put:
      operationId: organizations_organization_update
      description: Creates a new organization
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/BusinessAccount'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/BusinessAccount'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/BusinessAccount'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BusinessAccount'
          description: ''
  /organizations/organization/{id}:
    post:
      operationId: organizations_organization_create
      description: Updates an organization with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Org'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/Org'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/Org'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Org'
          description: ''
    patch:
      operationId: organizations_organization_partial_update
      description: Partially updates an organization with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - organizations
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedOrg'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedOrg'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedOrg'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Org'
          description: ''
    delete:
      operationId: organizations_organization_destroy
      description: Deletes an organization with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - organizations
      security:
      - {}
      responses:
        '204':
          description: No response body
  /user-count-overview:
    get:
      operationId: user_count_overview_retrieve
      tags:
      - user-count-overview
      security:
      - {}
      responses:
        '200':
          description: No response body
  /user-count-per-hour/{day}/:
    get:
      operationId: user_count_per_hour_retrieve
      parameters:
      - in: path
        name: day
        schema:
          type: string
        required: true
      tags:
      - user-count-per-hour
      security:
      - {}
      responses:
        '200':
          description: No response body
  /users/:
    get:
      operationId: users_list
      description: Lists all the users
      tags:
      - users
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
          description: ''
    post:
      operationId: users_create
      description: Creates a new user
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example1:
                value:
                  firstName: Joseph
                  lastName: Doe
                  bio: I am a student at the University of Alberta
                  email: jdoe@ualberta.ca
                summary: Example 1
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
  /users/{id}:
    get:
      operationId: users_retrieve
      description: Gets a user with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    put:
      operationId: users_update
      description: Updates a user with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/User'
            examples:
              Example1:
                value:
                  firstName: Joseph
                  lastName: Doe
                  bio: I am a student at the University of Alberta
                  email: jdoe@ualberta.ca
                summary: Example 1
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/User'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/User'
        required: true
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    patch:
      operationId: users_partial_update
      description: Partially updates a user with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedUser'
            examples:
              Example1:
                value:
                  firstName: Joseph
                  lastName: Doe
                  bio: I am a student at the University of Alberta
                  email: jdoe@ualberta.ca
                summary: Example 1
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedUser'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedUser'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
          description: ''
    delete:
      operationId: users_destroy
      description: Deletes a user with the specified id
      parameters:
      - in: path
        name: id
        schema:
          type: integer
        required: true
      tags:
      - users
      security:
      - {}
      responses:
        '204':
          description: No response body
  /users/{user_id}/timeslots/:
    get:
      operationId: users_timeslots_list
      description: Lists all the users timeslots
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timeslot'
          description: ''
    post:
      operationId: users_timeslots_create
      description: Creates a new timeslot
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      requestBody:
        content:
          application/json:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Timeslot'
          application/x-www-form-urlencoded:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Timeslot'
          multipart/form-data:
            schema:
              type: array
              items:
                $ref: '#/components/schemas/Timeslot'
        required: true
      security:
      - {}
      responses:
        '201':
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Timeslot'
          description: ''
    delete:
      operationId: users_timeslots_destroy
      description: Deletes all the users timeslots
      parameters:
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      security:
      - {}
      responses:
        '204':
          description: No response body
  /users/{user_id}/timeslots/{date}/:
    get:
      operationId: users_timeslots_retrieve
      description: Gets all the timeslots of a specific date
      parameters:
      - in: path
        name: date
        schema:
          type: string
          pattern: ^\d{4}-\d{2}-\d{2}$
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
          description: ''
  /users/{user_id}/timeslots/{timeslot_id}:
    get:
      operationId: users_timeslots_retrieve_2
      description: Gets a timeslot
      parameters:
      - in: path
        name: timeslot_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
          description: ''
    patch:
      operationId: users_timeslots_partial_update
      description: Updates a timeslot
      parameters:
      - in: path
        name: timeslot_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/PatchedTimeslot'
          application/x-www-form-urlencoded:
            schema:
              $ref: '#/components/schemas/PatchedTimeslot'
          multipart/form-data:
            schema:
              $ref: '#/components/schemas/PatchedTimeslot'
      security:
      - {}
      responses:
        '200':
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Timeslot'
          description: ''
    delete:
      operationId: users_timeslots_destroy_2
      description: Deletes a timeslot
      parameters:
      - in: path
        name: timeslot_id
        schema:
          type: integer
        required: true
      - in: path
        name: user_id
        schema:
          type: integer
        required: true
      tags:
      - timeslots
      security:
      - {}
      responses:
        '204':
          description: No response body
components:
  schemas:
    Ad:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        name:
          type: string
        description:
          type: string
        media:
          type: string
          format: uri
        pending:
          type: boolean
        rejected:
          type: boolean
        category:
          type: string
          maxLength: 50
        time_start:
          type: string
          format: date-time
        time_end:
          type: string
          format: date-time
        is_removed:
          type: boolean
        org_id:
          type: integer
        event_id:
          type: integer
      required:
      - event_id
      - id
      - media
      - name
      - org_id
      - time_end
      - time_start
    BusinessAccount:
      type: object
      properties:
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50
        email:
          type: string
          maxLength: 50
        password:
          type: string
        name:
          type: string
        bio:
          type: string
        description:
          type: string
        pending:
          type: boolean
          default: true
        rejected:
          type: boolean
          default: false
        phone:
          type: string
          maxLength: 20
        is_removed:
          type: boolean
          default: false
      required:
      - description
      - email
      - firstName
      - lastName
      - name
      - password
      - phone
    Event:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        org_name:
          type: string
          readOnly: true
        org_email:
          type: string
          readOnly: true
        org_phone:
          type: string
          readOnly: true
        name:
          type: string
        summary:
          type: string
        attendance_max:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        proposal:
          type: boolean
        rejected:
          type: boolean
        is_removed:
          type: boolean
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        org_id:
          type: integer
      required:
      - attendance_max
      - id
      - name
      - org_email
      - org_id
      - org_name
      - org_phone
      - summary
    EventRequest:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        event_id:
          type: integer
        user_id:
          type: integer
      required:
      - event_id
      - id
      - user_id
    EventUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        was_rejected:
          type: boolean
        event_id:
          type: integer
        user_id:
          type: integer
      required:
      - event_id
      - id
      - user_id
    IdResponse:
      type: object
      properties:
        id:
          type: integer
      required:
      - id
    LoginInp:
      type: object
      properties:
        email:
          type: string
        password:
          type: integer
      required:
      - email
      - password
    Org:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        manager_id:
          type: integer
        email:
          type: string
          readOnly: true
        phone:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        pending:
          type: boolean
        rejected:
          type: boolean
        creationDate:
          type: string
          format: date-time
          readOnly: true
        is_removed:
          type: boolean
      required:
      - creationDate
      - description
      - email
      - id
      - name
      - phone
    PatchedEvent:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        org_name:
          type: string
          readOnly: true
        org_email:
          type: string
          readOnly: true
        org_phone:
          type: string
          readOnly: true
        name:
          type: string
        summary:
          type: string
        attendance_max:
          type: integer
          maximum: 9223372036854775807
          minimum: -9223372036854775808
          format: int64
        proposal:
          type: boolean
        rejected:
          type: boolean
        is_removed:
          type: boolean
        start_datetime:
          type: string
          format: date-time
        end_datetime:
          type: string
          format: date-time
        org_id:
          type: integer
    PatchedOrg:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        manager_id:
          type: integer
        email:
          type: string
          readOnly: true
        phone:
          type: string
          readOnly: true
        name:
          type: string
        description:
          type: string
        pending:
          type: boolean
        rejected:
          type: boolean
        creationDate:
          type: string
          format: date-time
          readOnly: true
        is_removed:
          type: boolean
    PatchedTimeslot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        date:
          type: string
          format: date
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        isAvailable:
          type: boolean
    PatchedUser:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50
        bio:
          type: string
          maxLength: 500
        email:
          type: string
          maxLength: 100
        preferredName:
          type: string
          maxLength: 50
        major:
          type: string
          maxLength: 50
        year:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        pronouns:
          type: string
          maxLength: 50
        backgroundImg:
          type: string
          nullable: true
        finishedSetup:
          type: boolean
        is_removed:
          type: boolean
        is_restricted:
          type: boolean
        is_blocked:
          type: boolean
        creation_date:
          type: string
          format: date-time
          readOnly: true
    Result:
      type: object
      properties:
        user:
          $ref: '#/components/schemas/User'
        access:
          type: string
      required:
      - access
      - user
    Timeslot:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        user:
          type: integer
          readOnly: true
        date:
          type: string
          format: date
        startTime:
          type: string
          format: date-time
        endTime:
          type: string
          format: date-time
        isAvailable:
          type: boolean
      required:
      - date
      - endTime
      - id
      - startTime
      - user
    User:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50
        bio:
          type: string
          maxLength: 500
        email:
          type: string
          maxLength: 100
        preferredName:
          type: string
          maxLength: 50
        major:
          type: string
          maxLength: 50
        year:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        pronouns:
          type: string
          maxLength: 50
        backgroundImg:
          type: string
          nullable: true
        finishedSetup:
          type: boolean
        is_removed:
          type: boolean
        is_restricted:
          type: boolean
        is_blocked:
          type: boolean
        creation_date:
          type: string
          format: date-time
          readOnly: true
      required:
      - bio
      - creation_date
      - firstName
      - id
      - lastName
    UserSerializerWithFlags:
      type: object
      properties:
        id:
          type: integer
          readOnly: true
        is_flag:
          type: string
          readOnly: true
        last_login:
          type: string
          format: date-time
          nullable: true
        firstName:
          type: string
          maxLength: 50
        lastName:
          type: string
          maxLength: 50
        preferredName:
          type: string
          maxLength: 50
        bio:
          type: string
          maxLength: 500
        major:
          type: string
          maxLength: 50
        year:
          type: integer
          maximum: 2147483647
          minimum: -2147483648
          nullable: true
        pronouns:
          type: string
          maxLength: 50
        backgroundImg:
          type: string
          nullable: true
        email:
          type: string
          maxLength: 100
        finishedSetup:
          type: boolean
        expoPushToken:
          type: string
          nullable: true
          maxLength: 100
        is_admin:
          type: boolean
        is_manager:
          type: boolean
        is_active:
          type: boolean
        is_staff:
          type: boolean
        is_superuser:
          type: boolean
        privacy_policy:
          type: boolean
        creation_date:
          type: string
          format: date-time
          readOnly: true
        is_restricted:
          type: boolean
        is_removed:
          type: boolean
        is_blocked:
          type: boolean
        password:
          type: string
          readOnly: true
        phone:
          type: string
          maxLength: 20
        groups:
          type: array
          items:
            type: integer
          description: The groups this user belongs to. A user will get all permissions
            granted to each of their groups.
        user_permissions:
          type: array
          items:
            type: integer
          description: Specific permissions for this user.
        blockedUsers:
          type: array
          items:
            type: integer
            title: BlockedUsers
      required:
      - bio
      - creation_date
      - firstName
      - id
      - is_flag
      - lastName
      - password
